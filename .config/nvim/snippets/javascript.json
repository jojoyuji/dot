{
 "TODO snippet": {
  "prefix": "todo",
  "body": [
    "// TODO ${1:texto aqui} `date +%d/%m/%Y` by Jojo - jojoyuji@gmail.com$0"
  ],
  "description": "TODO snippet"
},
  "switch": {
    "prefix": "switch",
    "body": "switch(${1:value}){\n\tcase ${2:'${3:option}'}:\n\t\t\t\t\t ${5}\n\t\t\t\t\t break;\n\tdefault:\n\t\t\t\t\t ${4}\n}",
    "description": "switch"
  },
  "strict": {
    "prefix": "strict",
    "body": "'use strict'; $0",
    "description": "use strict"
  },
  "a": {
    "prefix": "a",
    "body": "alert(${$TM_SELECTED_TEXT}${1:'${2:value}'});$0",
    "description": "alert()"
  },
  "event": {
    "prefix": "event",
    "body": "${1:e}.stopPropagation();$0",
    "description": "e.stopPropagation()"
  },
  ":,": {
    "prefix": ":,",
    "body": "\t\t${1:value_name}: ${0:value},",
    "description": "Object Value JS"
  },
  ":": {
    "prefix": ":",
    "body": "\t${1:key}: ${2:'${3:value}'}${4:, }",
    "description": "Object key key: 'value'"
  },
  "proto": {
    "prefix": "proto",
    "body": "\t${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {\n\t\t${$TM_SELECTED_TEXT}$0\n\t};",
    "description": "Prototype (proto)"
  },
  "jsf": {
    "prefix": "jsf",
    "body": "var getMaxHeight = function ($elms) {\n\tvar maxHeight = 0;\n\t$elms.each(function () {\n\t\t\t// In some cases you may want to use outerHeight() instead\n\t\t\tvar height = $(this).height();\n\t\t\tif (height > maxHeight) {\n\t\t\tmaxHeight = height;\n\t\t\t}\n\t\t\t});\n\treturn maxHeight;\n};",
    "description": "getMaxHeight() - Get the maxHeight of a set of elements"
  },
  "ready": {
    "prefix": "ready",
    "body": "$(function() {\n\t\t${1}\n\t\t});",
    "description": "jquery - $(funcion(){})"
  },
  "t": {
    "prefix": "t",
    "body": "(${1:a>b}) ? ${2:true} : ${3:false};$0",
    "description": "Ternary"
  },
  "js": {
    "prefix": "js",
    "body": "Array.prototype.getUnique = function() {\n\tvar u = {}, a = [];\n\tfor(var i = 0, l = this.length; i < l; ++i){\n\t\tif(u.hasOwnProperty(this[i])) {\n\t\t\tcontinue;\n\t\t}\n\t\ta.push(this[i]);\n\t\tu[this[i]] = 1;\n\t}\n\treturn a;\n}",
    "description": "Array.getUnique()"
  },
  "for": {
    "prefix": "for",
    "body": "for (var ${2:i}=0; $2 < ${1:Things}.length; $2++) {\n\t${3:$1[$2]}${$TM_SELECTED_TEXT}$0\n}",
    "description": "for (...) {...}"
  },
  "fun": {
    "prefix": "fun",
    "body": "function ${1:function_name} (${2:argument}) {\n\t${$TM_SELECTED_TEXT}$0\n}",
    "description": "function (fun)"
  },
  "iife": {
    "prefix": "iife",
    "body": "(function (${1:argument}) {\n ${$TM_SELECTED_TEXT}$0\n }(${2:$1}));",
    "description": "Immediately-Invoked Function Expression (iife)"
  },
  "ife": {
    "prefix": "ife",
    "body": "if (${1:condition}) {\n\t${$TM_SELECTED_TEXT}\n}\nelse {\n\t${3://code}\n}",
    "description": "if ___ else"
  },
  "sto": {
    "prefix": "sto",
    "body": "setTimeout(${2:function() {\n\t${$TM_SELECTED_TEXT}${3}\n}}, ${1:500});",
    "description": "setTimeout()"
  },
  "sti": {
    "prefix": "sti",
    "body": "setInterval(${2:function() {\n\t${$TM_SELECTED_TEXT}${3}\n}}, ${1:500});",
    "description": "setInterval()"
  },
  "cli": {
    "prefix": "cli",
    "body": "cleatInterval(${2:var});",
    "description": "clearInterval()"
  },
  "clt": {
    "prefix": "clt",
    "body": "cleatTimeout(${2:var});",
    "description": "clearTimeout()"
  },
  "if": {
    "prefix": "if",
    "body": "if (${1:condition}) {\n\t${$TM_SELECTED_TEXT}\n\t$0\n}",
    "description": "if"
  },
  "timeout": {
    "prefix": "timeout",
    "body": "setTimeout(function() {\n\t${$TM_SELECTED_TEXT}$0\n}${2:.bind(${3:this})}, ${1:10});",
    "description": "setTimeout function"
  },
  "d": {
    "prefix": "d",
    "body": "debugger;",
    "description": "debugger"
  },
  "log": {
    "prefix": "log",
    "body": "console.log($TM_SELECTED_TEXT${1:'${2:value}'});",
    "description": "console.log"
  },
  "logy": {
    "prefix": "logy",
    "body": "console.log('%c ${1:minha mensagem}', 'font-family: Lato, sans-serif; line-height: 1em; color: #00ccff; font-weight:bold; font-size: 121px; text-shadow:0px 0px 0 rgb(-66,138,189),0px 1px 0 rgb(-79,125,176),0px 2px 0 rgb(-93,111,162),0px 3px 0 rgb(-107,97,148),0px 4px 0 rgb(-120,84,135),0px 5px 0 rgb(-134,70,121), 0px 6px 0 rgb(-148,56,107),0px 7px 6px rgba(0,0,0,0.65),0px 7px 1px rgba(0,0,0,0.5),0px 0px 6px rgba(0,0,0,.2);');",
    "description": "fancy console.log"
  },
  "cl": {
    "prefix": "cl",
    "body": "console.log(${$TM_SELECTED_TEXT}${1:'${2:value}'});",
    "description": "console.log"
  },
  "cw": {
    "prefix": "cw",
    "body": "console.warn(${1:'${2:value}'});",
    "description": "console.warn"
  },
  "ci": {
    "prefix": "ci",
    "body": "console.info(${$TM_SELECTED_TEXT}${1:'${2:value}'});",
    "description": "console.info"
  },
  "ce": {
    "prefix": "ce",
    "body": "console.error(${$TM_SELECTED_TEXT}${1:'${2:value}'});",
    "description": "console.error"
  },
  "ca": {
    "prefix": "ca",
    "body": "console.assert(${$TM_SELECTED_TEXT}${1:assertion}, ${2:'${3:message}'});",
    "description": "console.assert"
  },
  "try": {
    "prefix": "try",
    "body": "try{\n\t${$TM_SELECTED_TEXT}\n\t${1://do something here}\n\t${2:throw ${3:errr};}\n}\ncatch(${4:err}){\n\t${5}\n}$0",
    "description": "try-catch"
  },
  "cgroup": {
    "prefix": "cgroup",
    "body": "console.group('${1:label}');\n${$TM_SELECTED_TEXT}$0\nconsole.groupEnd();",
    "description": "console.group"
  },
  "ctime": {
    "prefix": "ctime",
    "body": "console.time('${1:label}');\n${$TM_SELECTED_TEXT}$0\nconsole.timeEnd('$1');",
    "description": "console.time"
  },
  "ctimestamp": {
    "prefix": "ctimestamp",
    "body": "console.timeStamp('${1:label}')",
    "description": "console.timestamp"
  },
  "ctrace": {
    "prefix": "ctrace",
    "body": "console.trace();",
    "description": "console.trace"
  },
  "f": {
    "prefix": "f",
    "body": "$0(${2:e}) => {\n\t${$TM_SELECTED_TEXT}\n}${1:,}",
    "description": "Arrow function"
  },
  "callback": {
    "prefix": "callback",
    "body": "if (${1:callback} && typeof($1) === 'function') {\n\t$1();\n}$0",
    "description": "Callback"
  },
  "r": {
    "prefix": "r",
    "body": "return ${1:value};$0",
    "description": "return"
  },
  "imp": {
    "prefix": "imp",
    "body": "import ${1} from '${2}';${0}",
    "description": "import ES5"
  },
  "req": {
    "prefix": "req",
    "body": "const ${1} = require('${2}');${3}${0}",
    "description": "Description"
  },
  "express": {
    "prefix": "express",
    "body": " const express = require('express')\n const app = express()\n const port = 3000\n \n app.get('/', (req, res) => {\n res.send('Hello World!')\n })\n \n app.listen(port, () => {\n console.log(`Example app listening on port ${port}`)\n }) ",
    "description": "Description"
  }
}
