call plug#begin(g:configpath.'/bundle')

"GIT
" Fugitive    
Plug 'tpope/vim-fugitive'
Plug 'aacunningham/vim-fuzzy-stash'

nnoremap <leader>gg :GStashList
nnoremap <leader>ga :GStash

let g:fugitive_pty = 0
let g:gitv_commitstep = 100
let g:gitv_openhorizontal = 0
highlight diffadded guifg=#00bf00
highlight diffremoved guifg=#bf0000
"fugitive mappings
nnoremap <leader>gs :Gstatus
" nnoremap <leader>gc :Gcommit
nnoremap <leader>gd :Gdiff
nnoremap <leader>gb :Gblame
nnoremap <leader>gr :Gread
nnoremap <leader>gw :Gwrite
nnoremap <leader>gp :Git push origin HEAD
nnoremap <leader>gl :Gpull
"Gitgutter 

Plug 'mhinz/vim-signify'

"Colorthemes 
Plug 'drewtempelmeyer/palenight.vim'
Plug 'sainnhe/edge'
let g:edge_style = 'neon'

let $NVIM_TUI_ENABLE_TRUE_COLOR=1
if (has("termguicolors"))
  set termguicolors
endif
if (empty($TMUX))
  if (has("nvim"))
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  if (has("termguicolors"))
    set termguicolors
  endif
endif


Plug 'lifepillar/vim-gruvbox8' 
"let g:gruvbox_invert_selection=0
let g:gruvbox_contrast_dark='hard'


"Movements
Plug 'tpope/vim-surround'
Plug 'rhysd/clever-f.vim'
Plug 'haya14busa/incsearch.vim'
Plug 'zoubin/vim-gotofile'


Plug 'dietsche/vim-lastplace'

" Quickfix
Plug 'stefandtw/quickfix-reflector.vim'
Plug 'romainl/vim-qf'


" Narrow 
Plug 'kana/vim-narrow' 
let g:narrow_allow_overridingp = 1
vmap <cr> :Narrow<cr>

" Plug 'svermeulen/vim-easyclip'
"FZF                                                                                                
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.9, 'height': 0.9,'yoffset':0.3,'xoffset': 0.3, 'highlight': 'Todo', 'border': 'sharp' } }

" let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'
" let $FZF_DEFAULT_COMMAND="rg --files --hidden"
let $FZF_DEFAULT_OPTS="--ansi --preview-window 'right:60%' --layout reverse  --preview 'bat --color=always --style=header,grid --line-range :300 {}'"

let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

function! s:yank_list()
  redir => ys
  silent Yanks
  redir END
  return split(ys, '\n')[1:]
endfunction

function! s:yank_handler(reg)
  if empty(a:reg)
    echo "aborted register paste"
  else
    let token = split(a:reg, ' ')
    execute 'Paste' . token[0]
  endif
endfunction

command! FZFYank call fzf#run({
      \ 'source': <sid>yank_list(),
      \ 'sink': function('<sid>yank_handler'),
      \ 'up': '~90%',
      \ 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.3,'xoffset': 0.3, 'highlight': 'Todo', 'border': 'sharp' } ,
      \ 'options': ' --no-preview'
      \ })

nnoremap <leader>mr :History<cr>
nnoremap <leader>b :Buffers<cr>
nnoremap <leader>pf :GitFiles<cr>
nnoremap <leader>ag :GitAg<cr>
" nnoremap <f12> :Colors<cr>
nnoremap <leader>y :FZFYank<cr>


autocmd VimEnter *
      \ command! -bang -nargs=* Ag
      \ call fzf#vim#ag(<q-args>, '', { 'options': '--bind ctrl-f:select-all,ctrl-d:deselect-all' }, <bang>0)


command! -bang -nargs=* GitAg
      \ call fzf#vim#ag(<q-args>, {'dir': systemlist('git rev-parse --show-toplevel')[0]}, <bang>0)

function! s:fzf_statusline()
  " Override statusline as you like
  highlight fzf1 ctermfg=161 ctermbg=251
  highlight fzf2 ctermfg=23 ctermbg=251
  highlight fzf3 ctermfg=237 ctermbg=251
  setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction

autocmd! User FzfStatusLine call <SID>fzf_statusline()

"NERDTree                                                                                                       
Plug 'jojoyuji/nerdtree-async' ", { 'on':  'NERDTreeToggle' }
Plug 'nerdtree-execute' ", { 'on':  'NERDTreeToggle' }
Plug 'MarSoft/nerdtree-grep-plugin'

let g:indent_guides_exclude_filetypes = ['nerdtree'] "fixes the folding issue on NERDTree
let NERDTreeShowBookmarks=1
let NERDTreeDirArrows=1
let NERDTreeMinimalUI=1
let NERDTreeChDirMode=2
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"closes nerdtree on tab
autocmd FileType NERDTree nmap <tab> q
"map <silent> <leader><tab>  :NERDTreeToggle<cr>
map <bs> :call RcsyncTree()<cr>
map <silent> <leader><tab>  :call RcsyncTree()<cr>
"map <silent> <bs>  :call RcsyncTree()<cr>
map <silent> <leader><leader><tab> <nop>
"allows NERDTree to change de cur dir
let g:NERDTreeChDirMode=2
" returns true iff is NERDTree open/active
function! RcisNTOpen()
  return exists("t:NERDTreeBufName")
endfunction
"calls NERDTreeFind iff NERDTree is active, current window contains a modifiable file, and we're not in vimdiff
function! RcsyncTree()
  if RcisNTOpen() == 0 && !&modifiable
    NERDTreClose
  elseif &modifiable 
    NERDTree %:p:h
  else
    NERDTreeClose
  endif
endfunction

"Bookmarking                                                                                                    
Plug 'MattesGroeger/vim-bookmarks'

nmap <Leader>mm <Plug>BookmarkToggle
nmap <Leader>i <Plug>BookmarkAnnotate
nmap <Leader>ma <Plug>BookmarkShowAll
nmap <Leader>mn <Plug>BookmarkNext
nmap <Leader>mb <Plug>BookmarkPrev
nmap <Leader>mc <Plug>BookmarkClear
nmap <Leader>mx <Plug>BookmarkClearAll
highlight BookmarkSign ctermbg=NONE ctermfg=198
highlight BookmarkLine ctermbg=198 ctermfg=NONE
let g:bookmarking_menu = 1
let g:bookmark_manage_per_buffer = 0
let g:bookmark_highlight_lines = 1
let g:bookmark_sign = '♥'
let g:bookmark_location_list = 1
let g:bookmark_no_default_key_mappings = 1
function! BookmarkMapKeys()
  nmap <leader>mm :BookmarkToggle<CR>
  nmap <leader>mi :BookmarkAnnotate<CR>
  nmap <leader>mn :BookmarkNext<CR>
  nmap <leader>mp :BookmarkPrev<CR>
  nmap <leader>ma :BookmarkShowAll<CR>
  nmap <leader>mc :BookmarkClear<CR>
  nmap <leader>mx :BookmarkClearAll<CR>
  nmap <leader>mk :BookmarkMoveUp<CR>
  nmap <leader>mj :BookmarkMoveDown<CR>
endfunction
function! BookmarkUnmapKeys()
  unmap <leader>mm
  unmap <leader>mi
  unmap <leader>mn
  unmap <leader>mp
  unmap <leader>ma
  unmap <leader>mc
  unmap <leader>mx
  unmap <leader>mk
  unmap <leader>mj
endfunction
autocmd BufEnter * :call BookmarkMapKeys()
autocmd BufEnter NERD_tree_* :call BookmarkUnmapKeys()



"Filetype Plug
" Plug 'posva/vim-vue'
let g:vue_disable_pre_processors = 1
Plug 'ap/vim-css-color'
Plug 'vim-scripts/SyntaxComplete'

Plug 'mattn/emmet-vim'

"javascript libs syntax
Plug 'othree/javascript-libraries-syntax.vim' 
let g:used_javascript_libs = 'underscore,jquery,angularjs,flux,vue,react,lodash,chai,jasmine'		
Plug 'moll/vim-node' , {'for': 'javascript'}
Plug 'jelera/vim-javascript-syntax', {'for': 'javascript'}
Plug 'othree/yajs.vim', {'for': 'javascript'}
Plug 'jojoyuji/vim-javascript', {'for': 'javascript'}
Plug 'Quramy/vim-js-pretty-template', {'for': 'javascript'}
Plug 'marijnh/tern_for_vim', {'do': 'npm install'}
Plug 'chrisbra/csv.vim', {'for': 'csv'}
Plug 'wavded/vim-stylus', {'for': 'stylus'}
Plug 'tpope/vim-haml'
Plug 'othree/html5.vim', {'for': 'html'}
Plug 'shime/vim-livedown', {'for': ['md', 'markdown'], 'do': 'npm install -g livedown'}
" Plug 'shmargum/vim-sass-colors', {'for': ['sass', 'stylus', 'styl', 'scss']}

"Indentation 
"Align                                                                                                     
" Plug 'vim-scripts/Align'
Plug 'junegunn/vim-easy-align'
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

Plug 'tommcdo/vim-lion'
Plug 'maksimr/vim-jsbeautify' , { 'for': [ 'html', 'css', 'stylus', 'scss', 'less'] }

Plug 'dense-analysis/ale', { 'for': [ 'html', 'css', 'stylus', 'scss', 'less', 'javascript', 'stylus', 'vue'] }
"
let g:ale_sign_column_always = 1
let g:ale_fixers = {
      \ 'javascript': ['eslint'],
      \ 'vue': ['eslint', 'stylelint']
      \ }

let g:ale_linters = {
      \   'javascript': ['eslint'],
      \}
let g:ale_linters_explicit = 1
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
let g:ale_open_list = 1
" Set this if you want to.
" This can be useful if you are combining ALE with
" some other plugin which sets quickfix errors, etc.
let g:ale_keep_list_window_open = 0
let g:ale_list_window_size = 5
let g:ale_floating_window_border = ['│', '─', '╭', '╮', '╯', '╰']
map <silent> [[ <Plug>(ale_previous_wrap)
map <silent> ]] <Plug>(ale_next_wrap)
autocmd BufEnter,BufNewFile,BufRead *.js noremap Q :ALEFix<cr>


Plug 'itspriddle/vim-javascript-indent', { 'for': 'javascript' }
Plug 'leshill/vim-json'
Plug 'elzr/vim-json' 
Plug 'XadillaX/json-formatter.vim', {'for': 'json', 'do': 'npm install jjson -g'}
Plug 'tpope/vim-jdaddy' ,{'for': 'json'}
Plug 'metakirby5/codi.vim'

"Pairing 
Plug 'Raimondi/delimitMate'
Plug 'bounceme/poppy.vim'  "show highlights on move between brackets, etc
let g:poppy_point_enable = 1
"TextObjects
Plug 'kana/vim-textobj-user'
Plug 'vim-indent-object'
Plug 'textobj-comment'
Plug 'hchbaw/textobj-motionmotion.vim'
Plug 'kana/vim-textobj-lastpat'

"Targets.vim                                                                                                
Plug 'wellle/targets.vim'
let g:targets_quotes = '"d ''q `'


" Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'neovim/nvim-lspconfig'
Plug 'anott03/nvim-lspinstall'


" lua << EOF
" local nvim_lsp = require'nvim_lsp'
" nvim_lsp.tsserver.setup{}
" EOF
"


"Complete 
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [
    \'coc-emmet',
    \'coc-explorer',
    \'coc-snippets',
    \'coc-yank',
    \'coc-markdownlint',
    \]

" Plug 'iamcco/coc-tailwindcss',  {'do': 'yarn install --frozen-lockfile && yarn run build'}
" Remap for do codeAction of selected region

Plug 'roxma/nvim-yarp'
Plug 'voldikss/vim-floaterm'
let g:floaterm_keymap_new    = '<F7>'
let g:floaterm_keymap_prev   = '<F8>'
let g:floaterm_keymap_next   = '<F9>'
" let g:floaterm_keymap_toggle = '<F12>'
let g:floaterm_keymap_kill = '<F11>'


Plug 'glacambre/firenvim', { 'do': { _ -> firenvim#install(0) } }

Plug 'jojoyuji/megaman-vim'
Plug 'jojoyuji/nyancat-vim'

Plug 'dbeniamine/todo.txt-vim'


" autocmd VimEnter * FloatermNew --height=0.6 --width=0.4 --wintype=float --name=todo --silent --title=Todos --position=topright --autoclose=0 

au filetype todo setlocal omnifunc=todo#Complete
" " Auto complete projects
" au filetype todo imap <buffer> + +<C-X><C-O>
" 
" " Auto complete contexts
" au filetype todo imap <buffer> @ @<C-X><C-O>


"youcompleteme mapping
imap <c-j> <c-n>
imap <c-k> <c-p>

Plug 'tyru/caw.vim'
map <leader>cc gcc
Plug 'Shougo/context_filetype.vim'

"Utilities
"
Plug 'pechorin/any-jump.vim'
let g:any_jump_disable_default_keybindings = 1
nnoremap gd :AnyJump<CR>



Plug 'frazrepo/vim-rainbow'
Plug 'romainl/vim-qf'
Plug 'tommcdo/vim-exchange'

Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-abolish'
Plug 'splitjoin.vim'

"Switch                                                                                                         
Plug 'jojoyuji/switch.vim'
nnoremap - :Switch<cr>
let g:switch_custom_definitions =
      \ [
      \   ['addClass', 'removeClass'],
      \   ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'] ,
      \   ['get', 'set'] ,
      \   ['left', 'right', 'center'] ,
      \   ['width', 'height'] ,
      \   ['error', 'success', 'warning'] ,
      \   ['show', 'hide'] ,
      \   ['const', 'let', 'var'] ,
      \   ['after', 'before'] ,
      \   ['padding', 'margin'] ,
      \   ['top', 'bottom'] ,
      \   ['relative', 'absolute', 'fixed', 'static'] ,
      \   ['setTimeout', '$timeout', 'setInterval'] ,
      \   ['$scope', '$rootScope'],
      \   ['$emit', '$broadcast'],
      \   ['console.log', 'alert'],
      \   ['radio', 'checkbox'],
      \   ['min', 'max'],
      \   ['unshift', 'push'],
      \   {
      \     '"\(\k\+\)"':                '''\1''',
      \     '''\(\k\+\)''':              '"\1"\2',
      \   }
      \ ]
Plug 'vim-scripts/Gundo'
Plug 'tpope/vim-unimpaired'
Plug 'caglartoklu/launchassociated.vim'
Plug 'vim-scripts/matchit.zip'
Plug '29decibel/vim-stringify'
Plug 'editorconfig/editorconfig-vim'
Plug 'mattn/webapi-vim'
"Plug 'mattn/gist-vim'
Plug 'lambdalisue/vim-gista'
"Plug 'lambdalisue/vim-gista-ctrlp'
Plug 'diepm/vim-rest-console' 

let g:vrc_curl_opts = {
      \ '--connect-timeout' : 10,
      \ '-L': '',
      \ '-sS': '',
      \ '-i': '',
      \ '--max-time': 60,
      \ '--ipv4': '',
      \ '-k': '',
      \}


Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'wellle/tmux-complete.vim'
Plug 'christoomey/vim-tmux-navigator'

"Vimux 
Plug 'benmills/vimux'
map <leader>nt :call VimuxRunCommand("clear; npm test")<CR>
map <leader>x :VimuxPromptCommand<CR>

" Plug 'vifm/neovim-vifm'

Plug 'itchyny/lightline.vim'
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ 'mode_map': {
      \ 'n' : 'N',
      \ 'i' : 'I',
      \ 'R' : 'R',
      \ 'v' : 'V',
      \ 'V' : 'VL',
      \ "\<C-v>": 'VB',
      \ 'c' : 'C',
      \ 's' : 'S',
      \ 'S' : 'SL',
      \ "\<C-s>": 'SB',
      \ 't': 'T',
      \ },
      \ }

"TmuxLine                                                                                                      

Plug 'edkolev/tmuxline.vim'
let g:tmuxline_preset = {
      \'a'    : '#S',
      \'win'  : ['#I', '#W'],
      \'cwin' : ['#I', '#W', '#F'],
      \'y'    : ['%R', '%a', '%Y'],
      \'z'    : '#H'}
if &term =~ '^screen' && exists('$TMUX')
  au VimEnter * if exists(':Tmuxline') | Tmuxline airline_insert | endif
endif 

Plug 'junegunn/vim-emoji'
command! Emoji %s/:\([^:]\+\):/\=emoji#for(submatch(1), submatch(0))/g




"Complete 

Plug 'neoclide/coc.nvim', {'branch': 'release'}

" let g:coc_node_path = '/usr/local/bin/node'
let g:coc_global_extensions = [
    \'coc-css',
    \'coc-html',
    \'coc-vetur',
    \'coc-emmet',
    \'coc-snippets',
    \'coc-yank',
    \'coc-eslint',
    \'coc-markdownlint'
    \]
autocmd FileType scss setl iskeyword+=@-@

Plug 'iamcco/coc-tailwindcss',  {'do': 'yarn install --frozen-lockfile && yarn run build'}
" Remap for do codeAction of selected region


"coc-snippets
" imap <tab> <Plug>(coc-snippets-expand-jump)
" vmap <tab> <Plug>(coc-snippets-select)


" To make completion works like VSCode
inoremap <expr> <TAB> pumvisible() ? "\<C-y>" : "\<TAB>"
let g:coc_snippet_next = '<TAB>'
let g:coc_snippet_prev = '<S-TAB>'

" let g:coc_snippet_next = '<c-j>'
" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<S-tab>'
" inoremap <silent><expr> <TAB>
"      \ pumvisible() ? coc#_select_confirm() :
"      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
"      \ <SID>check_back_space() ? "\<TAB>" :
"      \ coc#refresh()
" 
" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~# '\s'
" endfunction

" let g:coc_snippet_next = '<tab>'
nmap <leader>\ :CocCommand snippets.editSnippets<cr>
vmap <tab> <Plug>(coc-snippets-select)

"coc-yank
nnoremap <silent> <leader>y  :<C-u>CocList -A --normal yank<cr>

call plug#end()

nnoremap <leader>vu :call LoadingMsg('Updating plugins...')<cr>:so $MYVIMRC<CR>:PlugUpdate
nnoremap <leader>vi :call LoadingMsg('Installing plugins...')<cr>:so $MYVIMRC<CR>:PlugInstall<cr>
nnoremap <leader>vc :call LoadingMsg('Cleaning plugins...')<cr>:so $MYVIMRC<CR>:PlugClean<cr>

function! CreateCenteredFloatingWindow() abort
  let height = float2nr((&lines - 2) / 1.5)
  let row = float2nr((&lines - height) / 2)
  let width = float2nr(&columns / 1.5)
  let col = float2nr((&columns - width) / 2)
  " Window
  let opts = {
    \ 'relative': 'editor',
    \ 'row': row - 1,
    \ 'col': col - 2,
    \ 'width': width + 4,
    \ 'height': height + 2,
    \ 'style': 'minimal'
    \ }

  let opts.row += 1
  let opts.height -= 2
  let opts.col += 2
  let opts.width -= 4

  autocmd BufEnter,BufNewFile,BufRead todo.txt noremap <buffer> <F12> :close<cr>
  autocmd BufEnter,BufNewFile,BufRead todo.txt noremap <buffer> q :close<cr>
  autocmd BufEnter,BufNewFile,BufRead todo.txt setlocal number

  call nvim_open_win(nvim_create_buf(v:false, v:true), v:true, opts)
  " au BufWipeout <buffer> exe 'bw '.s:buf
endfunction

function! FloatingWindowHelp(query) abort
  let l:buf = CreateCenteredFloatingWindow()
  hi Pmenu ctermbg=gray guibg=#333333
  set winhl=Normal:Pmenu
  call nvim_set_current_buf(l:buf)
  execute 'e ' . a:query
  " setlocal filetype=help
  " au BufWipeout <buffer> exe 'bw '.l:buf
endfunction

command! -complete=help -nargs=? Todo call FloatingWindowHelp(<q-args>)
nmap <F12> <esc>:Todo ~/Google Drive/NOTAS/todo.txt<cr>
" vim:  ft=vim 
