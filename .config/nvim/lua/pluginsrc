call plug#begin('~/.config/nvim/bundle')

"GIT
" Fugitive    
" Plug 'tpope/vim-fugitive'


" nnoremap <leader>gg :GStashList
" nnoremap <leader>ga :GStash
" 
" let g:fugitive_pty = 0
" let g:gitv_commitstep = 100
" let g:gitv_openhorizontal = 0
" highlight diffadded guifg=#00bf00
" highlight diffremoved guifg=#bf0000
" "fugitive mappings
" nnoremap <leader>gs :Gstatus
" " nnoremap <leader>gc :Gcommit
" nnoremap <leader>gd :Gdiff
" nnoremap <leader>gb :Gblame
" nnoremap <leader>gr :Gread
" nnoremap <leader>gw :Gwrite
" nnoremap <leader>gp :Dispatch Git push origin HEAD
" nnoremap <leader>gl :Gpull
" autocmd FileType fugitive noremap <buffer> q :q<cr>

"Gitgutter 

" Plug 'mhinz/vim-signify'

"Colorthemes 
" Plug 'drewtempelmeyer/palenight.vim'
" Plug 'sainnhe/edge'
" let g:edge_style = 'neon'


" "Movements
" Plug 'tpope/vim-surround'
" Plug 'rhysd/clever-f.vim'
" Plug 'haya14busa/incsearch.vim'
" Plug 'dietsche/vim-lastplace'

" Quickfix
" Plug 'stefandtw/quickfix-reflector.vim'
" Plug 'romainl/vim-qf'


" Narrow 
" Plug 'kana/vim-narrow' 
" let g:narrow_allow_overridingp = 1
" vmap <cr> :Narrow<cr>
" 

"Bookmarking                                                                                                    
Plug 'MattesGroeger/vim-bookmarks'

nmap <Leader>mm <Plug>BookmarkToggle
nmap <Leader>i <Plug>BookmarkAnnotate
nmap <Leader>ma <Plug>BookmarkShowAll
nmap <Leader>mn <Plug>BookmarkNext
nmap <Leader>mb <Plug>BookmarkPrev
nmap <Leader>mc <Plug>BookmarkClear
nmap <Leader>mx <Plug>BookmarkClearAll
highlight BookmarkSign ctermbg=NONE ctermfg=198
highlight BookmarkLine ctermbg=198 ctermfg=NONE
let g:bookmarking_menu = 1
let g:bookmark_manage_per_buffer = 0
let g:bookmark_highlight_lines = 1
let g:bookmark_sign = '♥'
let g:bookmark_location_list = 1
let g:bookmark_no_default_key_mappings = 1
function! BookmarkMapKeys()
  nmap <leader>mm :BookmarkToggle<CR>
  nmap <leader>mi :BookmarkAnnotate<CR>
  nmap <leader>mn :BookmarkNext<CR>
  nmap <leader>mp :BookmarkPrev<CR>
  nmap <leader>ma :BookmarkShowAll<CR>
  nmap <leader>mc :BookmarkClear<CR>
  nmap <leader>mx :BookmarkClearAll<CR>
  nmap <leader>mk :BookmarkMoveUp<CR>
  nmap <leader>mj :BookmarkMoveDown<CR>
endfunction
function! BookmarkUnmapKeys()
  unmap <leader>mm
  unmap <leader>mi
  unmap <leader>mn
  unmap <leader>mp
  unmap <leader>ma
  unmap <leader>mc
  unmap <leader>mx
  unmap <leader>mk
  unmap <leader>mj
endfunction
autocmd BufEnter * :call BookmarkMapKeys()
autocmd BufEnter NERD_tree_* :call BookmarkUnmapKeys()



"Filetype Plug
" Plug 'posva/vim-vue'
let g:vue_disable_pre_processors = 1
Plug 'ap/vim-css-color'
Plug 'mattn/emmet-vim'

"javascript libs syntax
Plug 'othree/javascript-libraries-syntax.vim' 
let g:used_javascript_libs = 'underscore,jquery,angularjs,flux,vue,react,lodash,chai,jasmine'		
Plug 'moll/vim-node' , {'for': 'javascript'}
Plug 'jelera/vim-javascript-syntax', {'for': 'javascript'}
Plug 'othree/yajs.vim', {'for': 'javascript'}
Plug 'jojoyuji/vim-javascript', {'for': 'javascript'}
Plug 'Quramy/vim-js-pretty-template', {'for': 'javascript'}
Plug 'marijnh/tern_for_vim', {'do': 'npm install'}
Plug 'chrisbra/csv.vim', {'for': 'csv'}
Plug 'wavded/vim-stylus', {'for': 'stylus'}
Plug 'tpope/vim-haml'
Plug 'othree/html5.vim', {'for': 'html'}
Plug 'shime/vim-livedown', {'for': ['md', 'markdown'], 'do': 'npm install -g livedown'}
" Plug 'shmargum/vim-sass-colors', {'for': ['sass', 'stylus', 'styl', 'scss']}

"Indentation 
"Align                                                                                                     
" Plug 'vim-scripts/Align'
Plug 'junegunn/vim-easy-align'
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

Plug 'tommcdo/vim-lion'
Plug 'maksimr/vim-jsbeautify' , { 'for': [ 'html', 'css', 'stylus', 'scss', 'less'] }

Plug 'dense-analysis/ale', { 'for': [ 'html', 'css', 'stylus', 'scss', 'less', 'javascript', 'stylus', 'vue'] }
"
let g:ale_sign_column_always = 1
let g:ale_fixers = {
      \ 'javascript': ['eslint'],
      \ 'vue': ['eslint', 'stylelint']
      \ }

let g:ale_linters = {
      \   'javascript': ['eslint'],
      \}
let g:ale_linters_explicit = 1
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
let g:ale_open_list = 1
" Set this if you want to.
" This can be useful if you are combining ALE with
" some other plugin which sets quickfix errors, etc.
let g:ale_keep_list_window_open = 0
let g:ale_list_window_size = 5
let g:ale_floating_window_border = ['│', '─', '╭', '╮', '╯', '╰']
map <silent> [[ <Plug>(ale_previous_wrap)
map <silent> ]] <Plug>(ale_next_wrap)
autocmd BufEnter,BufNewFile,BufRead *.js noremap Q :ALEFix<cr>


Plug 'itspriddle/vim-javascript-indent', { 'for': 'javascript' }
Plug 'leshill/vim-json'
Plug 'elzr/vim-json' 
Plug 'XadillaX/json-formatter.vim', {'for': 'json', 'do': 'npm install jjson -g'}
Plug 'tpope/vim-jdaddy' ,{'for': 'json'}
Plug 'metakirby5/codi.vim'

"Pairing 
Plug 'Raimondi/delimitMate'

"TextObjects
Plug 'kana/vim-textobj-user'
Plug 'vim-indent-object'
Plug 'textobj-comment'
Plug 'hchbaw/textobj-motionmotion.vim'
Plug 'kana/vim-textobj-lastpat'

"Targets.vim                                                                                                
Plug 'wellle/targets.vim'
let g:targets_quotes = '"d ''q `'

"Complete 
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [
    \'coc-emmet',
    \'coc-explorer',
    \'coc-snippets',
    \'coc-markdownlint',
    \]

Plug 'rafcamlet/coc-nvim-lua'

" Plug 'iamcco/coc-tailwindcss',  {'do': 'yarn install --frozen-lockfile && yarn run build'}
" Remap for do codeAction of selected region

Plug 'roxma/nvim-yarp'

Plug 'jojoyuji/megaman-vim'
Plug 'jojoyuji/nyancat-vim'

Plug 'dbeniamine/todo.txt-vim'
au filetype todo setlocal omnifunc=todo#Complete

" " Auto complete projects
" au filetype todo imap <buffer> + +<C-X><C-O>
" 
" " Auto complete contexts
" au filetype todo imap <buffer> @ @<C-X><C-O>


"youcompleteme mapping
imap <c-j> <c-n>
imap <c-k> <c-p>

Plug 'tyru/caw.vim'
map <leader>cc gcc
Plug 'Shougo/context_filetype.vim'

"Utilities
"
Plug 'pechorin/any-jump.vim'
let g:any_jump_disable_default_keybindings = 1
nnoremap gd :AnyJump<CR>


Plug 'romainl/vim-qf'
Plug 'tommcdo/vim-exchange'

Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-abolish'
Plug 'splitjoin.vim'

"Switch                                                                                                         
Plug 'jojoyuji/switch.vim'
nnoremap - :Switch<cr>
let g:switch_custom_definitions =
      \ [
      \   ['addClass', 'removeClass'],
      \   ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'] ,
      \   ['get', 'set'] ,
      \   ['left', 'right', 'center'] ,
      \   ['width', 'height'] ,
      \   ['error', 'success', 'warning'] ,
      \   ['show', 'hide'] ,
      \   ['const', 'let', 'var'] ,
      \   ['after', 'before'] ,
      \   ['padding', 'margin'] ,
      \   ['top', 'bottom'] ,
      \   ['relative', 'absolute', 'fixed', 'static'] ,
      \   ['setTimeout', '$timeout', 'setInterval'] ,
      \   ['$scope', '$rootScope'],
      \   ['$emit', '$broadcast'],
      \   ['console.log', 'alert'],
      \   ['radio', 'checkbox'],
      \   ['min', 'max'],
      \   ['unshift', 'push'],
      \   {
      \     '"\(\k\+\)"':                '''\1''',
      \     '''\(\k\+\)''':              '"\1"\2',
      \   }
      \ ]
Plug 'vim-scripts/Gundo'
Plug 'tpope/vim-unimpaired'
Plug 'caglartoklu/launchassociated.vim'
Plug 'vim-scripts/matchit.zip'
Plug '29decibel/vim-stringify'
Plug 'editorconfig/editorconfig-vim'
Plug 'mattn/webapi-vim'
"Plug 'mattn/gist-vim'
Plug 'lambdalisue/vim-gista'
"Plug 'lambdalisue/vim-gista-ctrlp'
Plug 'diepm/vim-rest-console' 

let g:vrc_curl_opts = {
      \ '--connect-timeout' : 10,
      \ '-L': '',
      \ '-sS': '',
      \ '-i': '',
      \ '--max-time': 60,
      \ '--ipv4': '',
      \ '-k': '',
      \}


Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'wellle/tmux-complete.vim'
Plug 'christoomey/vim-tmux-navigator'

"Vimux 
Plug 'benmills/vimux'
map <leader>nt :call VimuxRunCommand("clear; npm test")<CR>
map <leader>x :VimuxPromptCommand<CR>


Plug 'junegunn/vim-emoji'
command! Emoji %s/:\([^:]\+\):/\=emoji#for(submatch(1), submatch(0))/g
" set completefunc=emoji#complete
set omnifunc=emoji#complete


"Complete 

Plug 'neoclide/coc.nvim', {'branch': 'release'}

" let g:coc_node_path = '/usr/local/bin/node'
let g:coc_global_extensions = [
    \'coc-css',
    \'coc-html',
    \'coc-vetur',
    \'coc-emmet',
    \'coc-snippets',
    \'coc-yank',
    \'coc-eslint',
    \'coc-markdownlint'
    \]
autocmd FileType scss setl iskeyword+=@-@

Plug 'iamcco/coc-tailwindcss',  {'do': 'yarn install --frozen-lockfile && yarn run build'}
" Remap for do codeAction of selected region

" To make completion works like VSCode
inoremap <expr> <TAB> pumvisible() ? "\<C-y>" : "\<TAB>"
let g:coc_snippet_next = '<TAB>'
let g:coc_snippet_prev = '<S-TAB>'

" let g:coc_snippet_next = '<tab>'
nmap <leader>\ :CocCommand snippets.editSnippets<cr>
vmap <tab> <Plug>(coc-snippets-select)


call plug#end()

nnoremap <leader>vu :call LoadingMsg('Updating plugins...')<cr>:so $MYVIMRC<CR>:PlugUpdate
nnoremap <leader>vi :call LoadingMsg('Installing plugins...')<cr>:Reload<cr>:PlugInstall<cr>
nnoremap <leader>vc :call LoadingMsg('Cleaning plugins...')<cr>:Reload<CR>:PlugClean<cr>

function! CreateCenteredFloatingWindow() abort
  let height = float2nr((&lines - 2) / 1.5)
  let row = float2nr((&lines - height) / 2)
  let width = float2nr(&columns / 1.5)
  let col = float2nr((&columns - width) / 2)
  " Window
  let opts = {
    \ 'relative': 'editor',
    \ 'row': row - 1,
    \ 'col': col - 2,
    \ 'width': width + 4,
    \ 'height': height + 2,
    \ 'style': 'minimal'
    \ }

  let opts.row += 1
  let opts.height -= 2
  let opts.col += 2
  let opts.width -= 4

  autocmd BufEnter,BufNewFile,BufRead todo.txt noremap <buffer> <F12> :close<cr>
  autocmd BufEnter,BufNewFile,BufRead todo.txt noremap <buffer> q :close<cr>
  autocmd BufEnter,BufNewFile,BufRead todo.txt setlocal number

  call nvim_open_win(nvim_create_buf(v:false, v:true), v:true, opts)
  " au BufWipeout <buffer> exe 'bw '.s:buf
endfunction

function! FloatingWindowHelp(query) abort
  let l:buf = CreateCenteredFloatingWindow()
  hi Pmenu ctermbg=gray guibg=#333333
  set winhl=Normal:Pmenu
  call nvim_set_current_buf(l:buf)
  execute 'e ' . a:query
  " setlocal filetype=help
  " au BufWipeout <buffer> exe 'bw '.l:buf
endfunction

command! -complete=help -nargs=? Todo call FloatingWindowHelp(<q-args>)
nmap <F12> <esc>:Todo ~/Google Drive/NOTAS/todo.txt<cr>

function Rand()
   let rs =  str2nr(matchstr(reltimestr(reltime()), '\v\.@<=\d+')[1:]) / line('$')
   echo rs
   execute(rs)
endfunction

command! Rand call Rand()


" vim:  ft=vim 
