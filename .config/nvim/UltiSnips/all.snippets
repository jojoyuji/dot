# This file contains snippets that are always defined. I personally
# have snippets for signatures and often needed texts

##############
# NICE BOXES #
##############
global !p
import string, vim

""" Maps a filetype to comment format used for boxes.
Automatically filled during usage"""
_commentDict = { }

def complete(t, opts):
	if t:
		opts = [ m[len(t):] for m in opts if m.startswith(t) ]
	if len(opts) == 1:
		return opts[0]
	return "[" + '|' .join(opts) + ']'

def _parse_comments(s):
    """ Parses vim's comments option to extract comment format """
    i = iter(s.split(","))

    rv = []
    try:
        while True:
            # get the flags and text of a comment part
            flags,text = i.next().split(':', 1)

            if len(flags) == 0:
                if len(text) == 1:
                    rv.append((text,text,text, ""))
            # parse 3-part comment, but ignore those with O flag
            elif flags[0] == 's' and 'O' not in flags:
                ctriple = []
                indent = ""

                if flags[-1] in string.digits:
                    indent = " " * int(flags[-1])
                ctriple.append(text)

                flags,text = i.next().split(':', 1)
                assert(flags[0] == 'm')
                ctriple.append(text)

                flags,text = i.next().split(':', 1)
                assert(flags[0] == 'e')
                ctriple.append(text)
                ctriple.append(indent)

                rv.append(ctriple)

            elif flags[0] == 'b':
                if len(text) == 1:
                    rv.insert(0, (text,text,text, ""))

    except StopIteration:
       return rv

def _get_comment_format():
    """ Returns a 4-element tuple representing the comment format for
    the current file. """

    ft = vim.eval("&filetype")
    # check if the comment dict has the format for the current file
    if _commentDict.has_key(ft):
        return _commentDict[ft]

    # otherwise parse vim's comments and add it for later use
    commentformat = _parse_comments(vim.eval("&comments"))[0]
    _commentDict[ft] = commentformat

    return commentformat


def make_box(twidth, bwidth=None):
    b, m, e, i = _get_comment_format()
    bwidth_inner = bwidth - 3 - max(len(b), len(i + e)) if bwidth else twidth + 2
    sline = b + m + bwidth_inner * m + 2 * m
    nspaces = (bwidth_inner - twidth) // 2
    mlines = i + m + " " + " " * nspaces
    mlinee = " " + " "*(bwidth_inner - twidth - nspaces) + m
    eline = i + 2 * m + bwidth_inner * m + m + e
    return sline, mlines, mlinee, eline

def foldmarker():
    "Return a tuple of (open fold marker, close fold marker)"
    return vim.eval("&foldmarker").split(",")

endglobal


global !p
endglobal


snippet box "A nice box with the current comment symbol" b
`!p
box = make_box(len(t[1]))
snip.rv = box[0] + '\n' + box[1]
`${1:content}`!p
box = make_box(len(t[1]))
snip.rv = box[2] + '\n' + box[3]`
$0
endsnippet

snippet bbox "A nice box over the full width" b
`!p
width = int(vim.eval("&textwidth")) or 71
box = make_box(len(t[1]), width)
snip.rv = box[0] + '\n' + box[1]
`${1:content}`!p
box = make_box(len(t[1]), width)
snip.rv = box[2] + '\n' + box[3]`
$0
endsnippet

snippet fold "Insert a vim fold marker" !b
`!p snip.rv = _get_comment_format()[0]` ${1:Fold description} `!p snip.rv = foldmarker()[0]`${2:1} `!p snip.rv = _get_comment_format()[2]`
endsnippet

snippet foldc "Insert a vim fold close marker" !b
`!p snip.rv = _get_comment_format()[0]` ${2:1}`!p snip.rv = foldmarker()[1]` `!p snip.rv = _get_comment_format()[2]`
endsnippet

snippet foldp "Insert a vim fold marker pair" !b
`!p snip.rv = _get_comment_format()[0]` ${1:Fold description} `!p snip.rv = foldmarker()[0]` `!p snip.rv = _get_comment_format()[2]`
${2:${VISUAL:Content}}
`!p snip.rv = _get_comment_format()[0]` `!p snip.rv = foldmarker()[1]` $1 `!p snip.rv = _get_comment_format()[2]`
endsnippet

##########################
# LOREM IPSUM GENERATORS #
##########################
snippet lorem "Lorem Ipsum - 50 Words" b
Mussum ipsum cacilds, vidis litro abertis. Consetis adipiscings elitis. 
Pra lá , depois divoltis porris, paradis. Paisis, filhis, espiritis santis. 
Mé faiz elementum girarzis, nisi eros vermeio, in elementis mé pra quem é amistosis quis leo. 
Manduma pindureta quium dia nois paga. Sapien in monti palavris qui num significa nadis i pareci latim. 
Interessantiss quisso pudia ce receita de bolis, mais bolis eu num gostis.
endsnippet

snippet lorem "Lorem Ipsum - 100 Words" b
Mussum ipsum cacilds, vidis litro abertis. Consetis adipiscings elitis. 
Pra lá , depois divoltis porris, paradis. Paisis, filhis, espiritis santis. 
Mé faiz elementum girarzis, nisi eros vermeio, in elementis mé pra quem é amistosis quis leo. 
Manduma pindureta quium dia nois paga. Sapien in monti palavris qui num significa nadis i pareci latim. 
Interessantiss quisso pudia ce receita de bolis, mais bolis eu num gostis.

Suco de cevadiss, é um leite divinis, qui tem lupuliz, matis, aguis e fermentis. 
Interagi no mé, cursus quis, vehicula ac nisi. Aenean vel dui dui. Nullam leo erat, aliquet quis tempus a, posuere ut mi. 
Ut scelerisque neque et turpis posuere pulvinar pellentesque nibh ullamcorper. 
Pharetra in mattis molestie, volutpat elementum justo. Aenean ut ante turpis. 
Pellentesque laoreet mé vel lectus scelerisque interdum cursus velit auctor. 
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam ac mauris lectus, non scelerisque augue. Aenean justo massa.

endsnippet
##################
#  Dev Snippets  #
##################


# {{{ JQUERY SNIPPETS
snippet ajax
	$.ajax({
	type: "POST",
	url: "${1:url.php}",
	cached: ${2:true},
	${3:data: { name: "John", location: "Boston" }},
	statusCode:{404: function(){ alert('404');}}
	})
	.done(function( msg ) {
	  ${4:alert( "Data Saved: " + msg );}
	})
	.fail(function() { alert("error"); });
endsnippet
snippet ready
	$(function(){
	${1}
	});
endsnippet
snippet importngmod
	<script src="https://ajax.googleapis.com/ajax/libs/angularjs/${1:1.0.6}/angular-resource.min.js"></script>
	<script>window.angular || document.write('<script src="js/vendor/angular-resource-$1.min.js"><\/script>')</script>

snippet importng  
	<script src="//ajax.googleapis.com/ajax/libs/angularjs/${1:1.0.6}/angular.min.js"></script>
	<script>window.angular || document.write('<script src="js/vendor/angular-$1.min.js"><\/script>')</script>
endsnippet
snippet importjq  
	<script src="//ajax.googleapis.com/ajax/libs/jquery/${1:1.8.2}/jquery.min.js"></script>
	<script>window.jQuery || document.write('<script src="js/vendor/jquery-$1.min.js"><\/script>')</script>
endsnippet
snippet $  
	$("${1:seletor}")${2:;}${3}
endsnippet


snippet jojo "Test python" !b
 position: $1`!p snip.rv=complete(t[1], ['relative', 'absolute', 'fixed', 'static'])`
endsnippet

#############
#  Comments for all langs  #
#############

snippet htmlc "Comment for HTML" !b
<!-- ${VISUAL} $1 -->

endsnippet


# vim:ft=snippets:
